<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureOpenDental.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        SZMmUVXx/x2pgNEUu6XbAAAAAElFTkSuQmCC
</value>
  </data>
</root>