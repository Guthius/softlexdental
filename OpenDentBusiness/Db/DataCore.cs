using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Xml;

namespace OpenDentBusiness
{
    /// <summary>
    /// You don't generally use this class.  Use Db instead except in special situations.
    /// </summary>
    public class DataCore
    {
        public static DataTable GetTable(string command) => DataConnection.GetTable(command);

        /// <summary>
        /// Only used if using the server component. 
        /// This is used for queries written by the user. 
        /// It uses the user with lower privileges to prevent injection attack.
        /// </summary>
        public static DataTable GetTableLow(string command) => DataConnection.GetTable(command);

        ///<summary>Sends a non query command to the database and returns the number of rows affected.
        ///This query is run with full privileges.  This is for commands generated by the main program, and the user will not have access for injection attacks.
        ///If getInsertID is true, then InsertID will be set to the value of the primary key of the newly inserted row.
        ///WILL NOT RETURN CORRECT PRIMARY KEY for MySQL if the query specifies the primary key.
        ///Pass in the PK column and table names so that Oracle can correctly lock the table and know which column to return for the Insert ID.</summary>
        public static long NonQ(string command, bool getInsertID, string columnNamePK, string tableName, params OdSqlParameter[] parameters)
        {
            var p = parameters.Select(x => x.GetMySqlParameter()).ToArray();

            var result = DataConnection.NonQ(command, getInsertID, columnNamePK, tableName, true, p);
            if (getInsertID)
            {
                result = DataConnection.InsertID;
            }

            return result;
        }

        /// <summary>
        /// This query is run with full privileges. 
        /// This is for commands generated by the main program, and the user will not have access for injection attacks. 
        /// Result is usually number of rows changed, or can be insert id if requested.
        /// WILL NOT RETURN CORRECT PRIMARY KEY if the query specifies the primary key.
        /// </summary>
        public static long NonQ(string command, bool getInsertID, params OdSqlParameter[] parameters)
        {
            return NonQ(command, getInsertID, "", "", parameters);
        }

        public static long NonQ(string command, params OdSqlParameter[] parameters)
        {
            return NonQ(command, false, parameters);
        }

        public static string GetScalar(string command) => DataConnection.GetScalar(command);
    }
}