//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class AllergyCrud {
		///<summary>Gets one Allergy object from the database using the primary key.  Returns null if not found.</summary>
		public static PatientAllergy SelectOne(long allergyNum) {
			string command="SELECT * FROM allergy "
				+"WHERE AllergyNum = "+POut.Long(allergyNum);
			List<PatientAllergy> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one Allergy object from the database using a query.</summary>
		public static PatientAllergy SelectOne(string command) {
			
			List<PatientAllergy> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of Allergy objects from the database using a query.</summary>
		public static List<PatientAllergy> SelectMany(string command) {
			
			List<PatientAllergy> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<PatientAllergy> TableToList(DataTable table) {
			List<PatientAllergy> retVal=new List<PatientAllergy>();
			PatientAllergy allergy;
			foreach(DataRow row in table.Rows) {
				allergy=new PatientAllergy();
				allergy.Id         = PIn.Long  (row["AllergyNum"].ToString());
				allergy.AllergyId      = PIn.Long  (row["AllergyDefNum"].ToString());
				allergy.PatientId             = PIn.Long  (row["PatNum"].ToString());
				allergy.Reaction           = PIn.String(row["Reaction"].ToString());
				allergy.Active     = PIn.Bool  (row["StatusIsActive"].ToString());
				allergy.DateTStamp         = PIn.DateT (row["DateTStamp"].ToString());
				allergy.DateAdverseReaction= PIn.Date  (row["DateAdverseReaction"].ToString());
				allergy.SnomedReaction     = PIn.String(row["SnomedReaction"].ToString());
				retVal.Add(allergy);
			}
			return retVal;
		}

		///<summary>Converts a list of Allergy into a DataTable.</summary>
		public static DataTable ListToTable(List<PatientAllergy> listAllergys,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="Allergy";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("AllergyNum");
			table.Columns.Add("AllergyDefNum");
			table.Columns.Add("PatNum");
			table.Columns.Add("Reaction");
			table.Columns.Add("StatusIsActive");
			table.Columns.Add("DateTStamp");
			table.Columns.Add("DateAdverseReaction");
			table.Columns.Add("SnomedReaction");
			foreach(PatientAllergy allergy in listAllergys) {
				table.Rows.Add(new object[] {
					POut.Long  (allergy.Id),
					POut.Long  (allergy.AllergyId),
					POut.Long  (allergy.PatientId),
					            allergy.Reaction,
					POut.Bool  (allergy.Active),
					POut.DateT (allergy.DateTStamp,false),
					POut.DateT (allergy.DateAdverseReaction,false),
					            allergy.SnomedReaction,
				});
			}
			return table;
		}

		///<summary>Inserts one Allergy into the database.  Returns the new priKey.</summary>
		public static long Insert(PatientAllergy allergy) {
			return Insert(allergy,false);
		}

		///<summary>Inserts one Allergy into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(PatientAllergy allergy,bool useExistingPK) {
			if(!useExistingPK && Preferences.RandomKeys) {
				allergy.Id=ReplicationServers.GetKey("allergy","AllergyNum");
			}
			string command="INSERT INTO allergy (";
			if(useExistingPK || Preferences.RandomKeys) {
				command+="AllergyNum,";
			}
			command+="AllergyDefNum,PatNum,Reaction,StatusIsActive,DateAdverseReaction,SnomedReaction) VALUES(";
			if(useExistingPK || Preferences.RandomKeys) {
				command+=POut.Long(allergy.Id)+",";
			}
			command+=
				     POut.Long  (allergy.AllergyId)+","
				+    POut.Long  (allergy.PatientId)+","
				+"'"+POut.String(allergy.Reaction)+"',"
				+    POut.Bool  (allergy.Active)+","
				//DateTStamp can only be set by MySQL
				+    POut.Date  (allergy.DateAdverseReaction)+","
				+"'"+POut.String(allergy.SnomedReaction)+"')";
			if(useExistingPK || Preferences.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				allergy.Id=Db.NonQ(command,true,"AllergyNum","allergy");
			}
			return allergy.Id;
		}

		///<summary>Inserts one Allergy into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(PatientAllergy allergy) {
			return InsertNoCache(allergy,false);
		}

		///<summary>Inserts one Allergy into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(PatientAllergy allergy,bool useExistingPK) {
			bool isRandomKeys=Preference.GetBoolNoCache(PreferenceName.RandomPrimaryKeys);
			string command="INSERT INTO allergy (";
			if(!useExistingPK && isRandomKeys) {
				allergy.Id=ReplicationServers.GetKeyNoCache("allergy","AllergyNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="AllergyNum,";
			}
			command+="AllergyDefNum,PatNum,Reaction,StatusIsActive,DateAdverseReaction,SnomedReaction) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(allergy.Id)+",";
			}
			command+=
				     POut.Long  (allergy.AllergyId)+","
				+    POut.Long  (allergy.PatientId)+","
				+"'"+POut.String(allergy.Reaction)+"',"
				+    POut.Bool  (allergy.Active)+","
				//DateTStamp can only be set by MySQL
				+    POut.Date  (allergy.DateAdverseReaction)+","
				+"'"+POut.String(allergy.SnomedReaction)+"')";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				allergy.Id=Db.NonQ(command,true,"AllergyNum","allergy");
			}
			return allergy.Id;
		}

		///<summary>Updates one Allergy in the database.</summary>
		public static void Update(PatientAllergy allergy) {
			string command="UPDATE allergy SET "
				+"AllergyDefNum      =  "+POut.Long  (allergy.AllergyId)+", "
				+"PatNum             =  "+POut.Long  (allergy.PatientId)+", "
				+"Reaction           = '"+POut.String(allergy.Reaction)+"', "
				+"StatusIsActive     =  "+POut.Bool  (allergy.Active)+", "
				//DateTStamp can only be set by MySQL
				+"DateAdverseReaction=  "+POut.Date  (allergy.DateAdverseReaction)+", "
				+"SnomedReaction     = '"+POut.String(allergy.SnomedReaction)+"' "
				+"WHERE AllergyNum = "+POut.Long(allergy.Id);
			Db.NonQ(command);
		}

		///<summary>Updates one Allergy in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(PatientAllergy allergy,PatientAllergy oldAllergy) {
			string command="";
			if(allergy.AllergyId != oldAllergy.AllergyId) {
				if(command!="") { command+=",";}
				command+="AllergyDefNum = "+POut.Long(allergy.AllergyId)+"";
			}
			if(allergy.PatientId != oldAllergy.PatientId) {
				if(command!="") { command+=",";}
				command+="PatNum = "+POut.Long(allergy.PatientId)+"";
			}
			if(allergy.Reaction != oldAllergy.Reaction) {
				if(command!="") { command+=",";}
				command+="Reaction = '"+POut.String(allergy.Reaction)+"'";
			}
			if(allergy.Active != oldAllergy.Active) {
				if(command!="") { command+=",";}
				command+="StatusIsActive = "+POut.Bool(allergy.Active)+"";
			}
			//DateTStamp can only be set by MySQL
			if(allergy.DateAdverseReaction.Date != oldAllergy.DateAdverseReaction.Date) {
				if(command!="") { command+=",";}
				command+="DateAdverseReaction = "+POut.Date(allergy.DateAdverseReaction)+"";
			}
			if(allergy.SnomedReaction != oldAllergy.SnomedReaction) {
				if(command!="") { command+=",";}
				command+="SnomedReaction = '"+POut.String(allergy.SnomedReaction)+"'";
			}
			if(command=="") {
				return false;
			}
			command="UPDATE allergy SET "+command
				+" WHERE AllergyNum = "+POut.Long(allergy.Id);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(Allergy,Allergy) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(PatientAllergy allergy,PatientAllergy oldAllergy) {
			if(allergy.AllergyId != oldAllergy.AllergyId) {
				return true;
			}
			if(allergy.PatientId != oldAllergy.PatientId) {
				return true;
			}
			if(allergy.Reaction != oldAllergy.Reaction) {
				return true;
			}
			if(allergy.Active != oldAllergy.Active) {
				return true;
			}
			//DateTStamp can only be set by MySQL
			if(allergy.DateAdverseReaction.Date != oldAllergy.DateAdverseReaction.Date) {
				return true;
			}
			if(allergy.SnomedReaction != oldAllergy.SnomedReaction) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one Allergy from the database.</summary>
		public static void Delete(long allergyNum) {
			string command="DELETE FROM allergy "
				+"WHERE AllergyNum = "+POut.Long(allergyNum);
			Db.NonQ(command);
		}

	}
}