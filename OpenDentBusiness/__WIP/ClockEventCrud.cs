//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud
{
    public class ClockEventCrud
    {
        ///<summary>Gets one ClockEvent object from the database using the primary key.  Returns null if not found.</summary>
        public static ClockEvent SelectOne(long clockEventNum)
        {
            string command = "SELECT * FROM clockevent "
                + "WHERE ClockEventNum = " + POut.Long(clockEventNum);
            List<ClockEvent> list = TableToList(Db.GetTable(command));
            if (list.Count == 0)
            {
                return null;
            }
            return list[0];
        }

        ///<summary>Gets one ClockEvent object from the database using a query.</summary>
        public static ClockEvent SelectOne(string command)
        {

            List<ClockEvent> list = TableToList(Db.GetTable(command));
            if (list.Count == 0)
            {
                return null;
            }
            return list[0];
        }

        ///<summary>Gets a list of ClockEvent objects from the database using a query.</summary>
        public static List<ClockEvent> SelectMany(string command)
        {

            List<ClockEvent> list = TableToList(Db.GetTable(command));
            return list;
        }

        ///<summary>Converts a DataTable to a list of objects.</summary>
        public static List<ClockEvent> TableToList(DataTable table)
        {
            List<ClockEvent> retVal = new List<ClockEvent>();
            ClockEvent clockEvent;
            foreach (DataRow row in table.Rows)
            {
                clockEvent = new ClockEvent();
                clockEvent.Id = PIn.Long(row["ClockEventNum"].ToString());
                clockEvent.EmployeeId = PIn.Long(row["EmployeeNum"].ToString());
                clockEvent.Date1Entered = PIn.DateT(row["TimeEntered1"].ToString());
                clockEvent.Date1Displayed = PIn.DateT(row["TimeDisplayed1"].ToString());
                clockEvent.Status = (OpenDentBusiness.ClockEventStatus)PIn.Int(row["ClockStatus"].ToString());
                clockEvent.Note = PIn.String(row["Note"].ToString());
                clockEvent.Date2Entered = PIn.DateT(row["TimeEntered2"].ToString());
                clockEvent.Date2Displayed = PIn.DateT(row["TimeDisplayed2"].ToString());
                clockEvent.Overtime = PIn.TSpan(row["OTimeHours"].ToString());
                clockEvent.OvertimeAuto = PIn.TSpan(row["OTimeAuto"].ToString());
                clockEvent.Adjust = PIn.TSpan(row["Adjust"].ToString());
                clockEvent.AdjustAuto = PIn.TSpan(row["AdjustAuto"].ToString());
                clockEvent.AdjustOverridden = PIn.Bool(row["AdjustIsOverridden"].ToString());
                clockEvent.Rate2 = PIn.TSpan(row["Rate2Hours"].ToString());
                clockEvent.Rate2Auto = PIn.TSpan(row["Rate2Auto"].ToString());
                clockEvent.ClinicId = PIn.Long(row["ClinicNum"].ToString());
                retVal.Add(clockEvent);
            }
            return retVal;
        }

        ///<summary>Inserts one ClockEvent into the database.  Returns the new priKey.</summary>
        public static long Insert(ClockEvent clockEvent)
        {
            return Insert(clockEvent, false);
        }

        ///<summary>Inserts one ClockEvent into the database.  Provides option to use the existing priKey.</summary>
        public static long Insert(ClockEvent clockEvent, bool useExistingPK)
        {
            if (!useExistingPK && Preferences.RandomKeys)
            {
                clockEvent.Id = ReplicationServers.GetKey("clockevent", "ClockEventNum");
            }
            string command = "INSERT INTO clockevent (";
            if (useExistingPK || Preferences.RandomKeys)
            {
                command += "ClockEventNum,";
            }
            command += "EmployeeNum,TimeEntered1,TimeDisplayed1,ClockStatus,Note,TimeEntered2,TimeDisplayed2,OTimeHours,OTimeAuto,Adjust,AdjustAuto,AdjustIsOverridden,Rate2Hours,Rate2Auto,ClinicNum) VALUES(";
            if (useExistingPK || Preferences.RandomKeys)
            {
                command += POut.Long(clockEvent.Id) + ",";
            }
            command +=
                     POut.Long(clockEvent.EmployeeId) + ","
                + DbHelper.Now() + ","
                + DbHelper.Now() + ","
                + POut.Int((int)clockEvent.Status) + ","
                + DbHelper.ParamChar + "paramNote,"
                + POut.DateT(clockEvent.Date2Entered) + ","
                + POut.DateT(clockEvent.Date2Displayed) + ","
                + "'" + POut.TSpan(clockEvent.Overtime) + "',"
                + "'" + POut.TSpan(clockEvent.OvertimeAuto) + "',"
                + "'" + POut.TSpan(clockEvent.Adjust) + "',"
                + "'" + POut.TSpan(clockEvent.AdjustAuto) + "',"
                + POut.Bool(clockEvent.AdjustOverridden) + ","
                + "'" + POut.TSpan(clockEvent.Rate2) + "',"
                + "'" + POut.TSpan(clockEvent.Rate2Auto) + "',"
                + POut.Long(clockEvent.ClinicId) + ")";
            if (clockEvent.Note == null)
            {
                clockEvent.Note = "";
            }
            OdSqlParameter paramNote = new OdSqlParameter("paramNote", OdDbType.Text, POut.StringParam(clockEvent.Note));
            if (useExistingPK || Preferences.RandomKeys)
            {
                Db.NonQ(command, paramNote);
            }
            else
            {
                clockEvent.Id = Db.NonQ(command, true, "ClockEventNum", "clockEvent", paramNote);
            }
            return clockEvent.Id;
        }

        ///<summary>Updates one ClockEvent in the database.</summary>
        public static void Update(ClockEvent clockEvent)
        {
            string command = "UPDATE clockevent SET "
                + "EmployeeNum       =  " + POut.Long(clockEvent.EmployeeId) + ", "
                //TimeEntered1 not allowed to change
                + "TimeDisplayed1    =  " + POut.DateT(clockEvent.Date1Displayed) + ", "
                + "ClockStatus       =  " + POut.Int((int)clockEvent.Status) + ", "
                + "Note              =  " + DbHelper.ParamChar + "paramNote, "
                + "TimeEntered2      =  " + POut.DateT(clockEvent.Date2Entered) + ", "
                + "TimeDisplayed2    =  " + POut.DateT(clockEvent.Date2Displayed) + ", "
                + "OTimeHours        = '" + POut.TSpan(clockEvent.Overtime) + "', "
                + "OTimeAuto         = '" + POut.TSpan(clockEvent.OvertimeAuto) + "', "
                + "Adjust            = '" + POut.TSpan(clockEvent.Adjust) + "', "
                + "AdjustAuto        = '" + POut.TSpan(clockEvent.AdjustAuto) + "', "
                + "AdjustIsOverridden=  " + POut.Bool(clockEvent.AdjustOverridden) + ", "
                + "Rate2Hours        = '" + POut.TSpan(clockEvent.Rate2) + "', "
                + "Rate2Auto         = '" + POut.TSpan(clockEvent.Rate2Auto) + "', "
                + "ClinicNum         =  " + POut.Long(clockEvent.ClinicId) + " "
                + "WHERE ClockEventNum = " + POut.Long(clockEvent.Id);
            if (clockEvent.Note == null)
            {
                clockEvent.Note = "";
            }
            OdSqlParameter paramNote = new OdSqlParameter("paramNote", OdDbType.Text, POut.StringParam(clockEvent.Note));
            Db.NonQ(command, paramNote);
        }
    }
}
