//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class AutoCodeCondCrud {
		///<summary>Gets one AutoCodeCond object from the database using the primary key.  Returns null if not found.</summary>
		public static AutoCodeCond SelectOne(long autoCodeCondNum) {
			string command="SELECT * FROM autocodecond "
				+"WHERE AutoCodeCondNum = "+POut.Long(autoCodeCondNum);
			List<AutoCodeCond> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one AutoCodeCond object from the database using a query.</summary>
		public static AutoCodeCond SelectOne(string command) {
			
			List<AutoCodeCond> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of AutoCodeCond objects from the database using a query.</summary>
		public static List<AutoCodeCond> SelectMany(string command) {
			
			List<AutoCodeCond> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<AutoCodeCond> TableToList(DataTable table) {
			List<AutoCodeCond> retVal=new List<AutoCodeCond>();
			AutoCodeCond autoCodeCond;
			foreach(DataRow row in table.Rows) {
				autoCodeCond=new AutoCodeCond();
				autoCodeCond.Id= PIn.Long  (row["AutoCodeCondNum"].ToString());
				autoCodeCond.AutoCodeItemId= PIn.Long  (row["AutoCodeItemNum"].ToString());
				autoCodeCond.Condition           = (OpenDentBusiness.AutoCondition)PIn.Int(row["Cond"].ToString());
				retVal.Add(autoCodeCond);
			}
			return retVal;
		}

		///<summary>Converts a list of AutoCodeCond into a DataTable.</summary>
		public static DataTable ListToTable(List<AutoCodeCond> listAutoCodeConds,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="AutoCodeCond";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("AutoCodeCondNum");
			table.Columns.Add("AutoCodeItemNum");
			table.Columns.Add("Cond");
			foreach(AutoCodeCond autoCodeCond in listAutoCodeConds) {
				table.Rows.Add(new object[] {
					POut.Long  (autoCodeCond.Id),
					POut.Long  (autoCodeCond.AutoCodeItemId),
					POut.Int   ((int)autoCodeCond.Condition),
				});
			}
			return table;
		}

		///<summary>Inserts one AutoCodeCond into the database.  Returns the new priKey.</summary>
		public static long Insert(AutoCodeCond autoCodeCond) {
			return Insert(autoCodeCond,false);
		}

		///<summary>Inserts one AutoCodeCond into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(AutoCodeCond autoCodeCond,bool useExistingPK) {
			if(!useExistingPK && Preferences.RandomKeys) {
				autoCodeCond.Id=ReplicationServers.GetKey("autocodecond","AutoCodeCondNum");
			}
			string command="INSERT INTO autocodecond (";
			if(useExistingPK || Preferences.RandomKeys) {
				command+="AutoCodeCondNum,";
			}
			command+="AutoCodeItemNum,Cond) VALUES(";
			if(useExistingPK || Preferences.RandomKeys) {
				command+=POut.Long(autoCodeCond.Id)+",";
			}
			command+=
				     POut.Long  (autoCodeCond.AutoCodeItemId)+","
				+    POut.Int   ((int)autoCodeCond.Condition)+")";
			if(useExistingPK || Preferences.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				autoCodeCond.Id=Db.NonQ(command,true,"AutoCodeCondNum","autoCodeCond");
			}
			return autoCodeCond.Id;
		}

		///<summary>Inserts one AutoCodeCond into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(AutoCodeCond autoCodeCond) {
			return InsertNoCache(autoCodeCond,false);
		}

		///<summary>Inserts one AutoCodeCond into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(AutoCodeCond autoCodeCond,bool useExistingPK) {
			bool isRandomKeys=Preference.GetBoolNoCache(PreferenceName.RandomPrimaryKeys);
			string command="INSERT INTO autocodecond (";
			if(!useExistingPK && isRandomKeys) {
				autoCodeCond.Id=ReplicationServers.GetKeyNoCache("autocodecond","AutoCodeCondNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="AutoCodeCondNum,";
			}
			command+="AutoCodeItemNum,Cond) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(autoCodeCond.Id)+",";
			}
			command+=
				     POut.Long  (autoCodeCond.AutoCodeItemId)+","
				+    POut.Int   ((int)autoCodeCond.Condition)+")";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				autoCodeCond.Id=Db.NonQ(command,true,"AutoCodeCondNum","autoCodeCond");
			}
			return autoCodeCond.Id;
		}

		///<summary>Updates one AutoCodeCond in the database.</summary>
		public static void Update(AutoCodeCond autoCodeCond) {
			string command="UPDATE autocodecond SET "
				+"AutoCodeItemNum=  "+POut.Long  (autoCodeCond.AutoCodeItemId)+", "
				+"Cond           =  "+POut.Int   ((int)autoCodeCond.Condition)+" "
				+"WHERE AutoCodeCondNum = "+POut.Long(autoCodeCond.Id);
			Db.NonQ(command);
		}

		///<summary>Updates one AutoCodeCond in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(AutoCodeCond autoCodeCond,AutoCodeCond oldAutoCodeCond) {
			string command="";
			if(autoCodeCond.AutoCodeItemId != oldAutoCodeCond.AutoCodeItemId) {
				if(command!="") { command+=",";}
				command+="AutoCodeItemNum = "+POut.Long(autoCodeCond.AutoCodeItemId)+"";
			}
			if(autoCodeCond.Condition != oldAutoCodeCond.Condition) {
				if(command!="") { command+=",";}
				command+="Cond = "+POut.Int   ((int)autoCodeCond.Condition)+"";
			}
			if(command=="") {
				return false;
			}
			command="UPDATE autocodecond SET "+command
				+" WHERE AutoCodeCondNum = "+POut.Long(autoCodeCond.Id);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(AutoCodeCond,AutoCodeCond) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(AutoCodeCond autoCodeCond,AutoCodeCond oldAutoCodeCond) {
			if(autoCodeCond.AutoCodeItemId != oldAutoCodeCond.AutoCodeItemId) {
				return true;
			}
			if(autoCodeCond.Condition != oldAutoCodeCond.Condition) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one AutoCodeCond from the database.</summary>
		public static void Delete(long autoCodeCondNum) {
			string command="DELETE FROM autocodecond "
				+"WHERE AutoCodeCondNum = "+POut.Long(autoCodeCondNum);
			Db.NonQ(command);
		}

	}
}