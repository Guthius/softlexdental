<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="LangCannotLeaveDatabaseBlank" xml:space="preserve">
    <value>Cannot leave database field blank.</value>
  </data>
  <data name="LangCannotLeaveServerBlank" xml:space="preserve">
    <value>Cannot leave server field blank.</value>
  </data>
  <data name="LangCannotLeaveUserBlank" xml:space="preserve">
    <value>Cannot leave user field blank.</value>
  </data>
  <data name="LangErrorConnectingToDatabase" xml:space="preserve">
    <value>Error connecting to database.</value>
  </data>
  <data name="LangErrorUpdatingPermissions" xml:space="preserve">
    <value>The service was successfully installed but there was a problem updating the permissions for managing the service.
The service may have to be manually stopped and started via an administrative user.
This can be cumbersome when updating to newer versions of the software.</value>
  </data>
  <data name="LangErrorWritingConfigurationFile" xml:space="preserve">
    <value>There was a problem writing a file to the system.</value>
  </data>
  <data name="LangExecutableFiles" xml:space="preserve">
    <value>Executable Files</value>
  </data>
  <data name="LangInstallationFailedWithExitCode" xml:space="preserve">
    <value>Installation failed with exit code {0}.</value>
  </data>
  <data name="LangManageService" xml:space="preserve">
    <value>Manage Service</value>
  </data>
  <data name="LangOpenDentalWebConfigSettings" xml:space="preserve">
    <value>OpenDentalWebConfig.xml Settings</value>
  </data>
  <data name="LangSelectAService" xml:space="preserve">
    <value>Select a Service</value>
  </data>
  <data name="LangSelectAValidServicePath" xml:space="preserve">
    <value>Select a valid service path</value>
  </data>
  <data name="LangSelectedServiceHasInvalidPath" xml:space="preserve">
    <value>The selected service has an invalid path.</value>
  </data>
  <data name="LangServiceNameMustBeginWithOpenDent" xml:space="preserve">
    <value>Service name must begin with "OpenDent".</value>
  </data>
  <data name="LangServiceNameOrDirectoryInUse" xml:space="preserve">
    <value>Either a service with this name is already installed or there is another service installed from this directory.</value>
  </data>
  <data name="LangStatusInstalled" xml:space="preserve">
    <value>Installed</value>
  </data>
  <data name="LangStatusNotInstalled" xml:space="preserve">
    <value>Not Installed</value>
  </data>
  <data name="LangStatusRunning" xml:space="preserve">
    <value>Running</value>
  </data>
  <data name="LangStatusStopped" xml:space="preserve">
    <value>Stopped</value>
  </data>
  <data name="LangUnexpectedErrorInstall" xml:space="preserve">
    <value>Unexpected error installing the service.</value>
  </data>
  <data name="LangUnexpectedErrorUninstall" xml:space="preserve">
    <value>Unexpected error uninstalling the service.</value>
  </data>
  <data name="LangUninstallFailedWithExitCode" xml:space="preserve">
    <value>Uninstall failed with exit code {0}.</value>
  </data>
</root>